// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PhotoSearch.Data;

#nullable disable

namespace PhotoSearch.Data.Migrations
{
    [DbContext(typeof(PhotoSearchContext))]
    [Migration("20240713200943_InitialDatabase")]
    partial class InitialDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PhotoSearch.Data.Models.Photo", b =>
                {
                    b.Property<string>("RelativePath")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CaptureDateUTC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExactPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ImportedDateUTC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("PublicUrl")
                        .HasColumnType("text");

                    b.Property<long>("SizeKb")
                        .HasColumnType("bigint");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("RelativePath");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("PhotoSearch.Data.Models.Photo", b =>
                {
                    b.OwnsMany("PhotoSearch.Data.Models.PhotoSummary", "PhotoSummaries", b1 =>
                        {
                            b1.Property<string>("PhotoRelativePath")
                                .HasColumnType("text");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<List<string>>("Categoties")
                                .HasColumnType("text[]");

                            b1.Property<DateTimeOffset>("DateGenerated")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Model")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<List<string>>("ObjectClasses")
                                .HasColumnType("text[]");

                            b1.HasKey("PhotoRelativePath", "Id");

                            b1.ToTable("Photos");

                            b1.ToJson("PhotoSummaries");

                            b1.WithOwner()
                                .HasForeignKey("PhotoRelativePath");
                        });

                    b.OwnsOne("PhotoSearch.Data.Models.Thumbnail", "Thumbnails", b1 =>
                        {
                            b1.Property<string>("PhotoRelativePath")
                                .HasColumnType("text");

                            b1.Property<string>("LargeThumbnailUrl")
                                .HasColumnType("text");

                            b1.Property<string>("MediumhumbnailUrl")
                                .HasColumnType("text");

                            b1.Property<string>("SmallThumbnailUrl")
                                .HasColumnType("text");

                            b1.HasKey("PhotoRelativePath");

                            b1.ToTable("Photos");

                            b1.ToJson("Thumbnails");

                            b1.WithOwner()
                                .HasForeignKey("PhotoRelativePath");
                        });

                    b.OwnsOne("System.Collections.Generic.Dictionary<string, string>", "Metadata", b1 =>
                        {
                            b1.Property<string>("PhotoRelativePath")
                                .HasColumnType("text");

                            b1.HasKey("PhotoRelativePath");

                            b1.ToTable("Photos");

                            b1.ToJson("Metadata");

                            b1.WithOwner()
                                .HasForeignKey("PhotoRelativePath");
                        });

                    b.Navigation("Metadata");

                    b.Navigation("PhotoSummaries");

                    b.Navigation("Thumbnails");
                });
#pragma warning restore 612, 618
        }
    }
}
